<div id="commentable-container" class="container commentable-container">
  <h1 class="title">
    What is a Distributed Version Control System?
  </h1>
  <hr>
  <h2>
    A Distributed Version Control System (DVCS) or Version Control System (VCS) is a system that records changes to a
    file or set of files over time so you can recall specific versions later.
  </h2>


  {{!-- This is the handlebar helper that we registered--}}
  {{assign 'existingComments' this.coment}}

  <p data-section-id="1" class="commentable-section">
    The DVCS usually works together with a Code Hosting Platform, where your team can store your project’s code to
    share it among members of the team.

    In computer programming, the combination of DVCS with a Code Hosting Platform help you to work with your team. This
    is the most powerful tool you will use to combine code created by different team members.

    When two different team members are working on the same file, the VCS is going to help them combine their different
    code, and pick which code to accept if both developers edit the same code.
  </p>
  <p data-section-id="2" class="commentable-section">
    Having different versions of the same file gives you huge power over your code. As said before, if you break
    something in the latest version of the code, you will be able to recover the old correct version of your code.

    It’s also very helpful when you are combining code from different developers into one file, or even different files
    into one project (don’t worry if you don’t understand this right now, you are going to learn this in depth later
    on).

    Another cool feature that it provides you is the chance to see who has written each code. It allows you to defend
    how many hours have you been working, of course, but it’s funnier to use it to figure out who has screw up the
    code.
  </p>
  <p data-section-id="3" class="commentable-section">
    Git is a free and open DVCS designed to handle computer programming projects with speed and efficiency. It’s easy
    to learn and has a very high performance.

    Git runs locally. What does it mean? It allows you to use the Version Control System in your laptop. It means that
    you will have in your own computer a Version Control System, to recover all code, see what changes you have done,
    etc.

    You are going to understand why you need to use Git in your computer in a minute. Before understand that, you need
    to learn what is GitHub.
  </p>

  <p data-section-id="4" class="commentable-section">
    Git is a free and open DVCS designed to handle computer programming projects with speed and efficiency. It’s easy
    to learn and has a very high performance.

    Git runs locally. What does it mean? It allows you to use the Version Control System in your laptop. It means that
    you will have in your own computer a Version Control System, to recover all code, see what changes you have done,
    etc.

    You are going to understand why you need to use Git in your computer in a minute. Before understand that, you need
    to learn what is GitHub.
  </p>


</div>

<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
<script src="/javascripts/side-comments.js"></script>
<script src="/javascripts/test_data.js"></script>

<script type="application/javascript">

  //Existing comments
  var existingComments = [{{{@root.existingComments}}}];




  //Construimos el objeto del usuario actual
  var currentUsera = {
    id: `{{this.userr.id}}`,
    avatarUrl: `{{this.userr.avatarUrl}}`,
    authorUrl: `{{this.userr.authorUrl}}`,
    name: `{{this.userr.name}}`,
  };

  $(document).ready(function () {

    var SideComments = require('side-comments');
    window.sideComments = new SideComments('#commentable-container', currentUsera, existingComments);
    window.sideComments.on('commentPosted', function (comment) {
      comment.id = parseInt(Math.random() * (100000 - 1) + 1);
    });

    //Delete test 
    window.sideComments.on('commentDeleted', function (comment) {
      sideComments.removeComment(comment.sectionId, comment.id);
    });

    // Listen to "commentPosted", and send a request to your backend to save the comment.
    // More about this event in the "docs" section.
    sideComments.on('commentPosted', function (comment) {
      $.ajax({
        url: '/comments',
        type: 'POST',
        data: comment,
        success: function (savedComment) {
          // Once the comment is saved, you can insert the comment into the comment stream with "insertComment(comment)".
          alert("Comment saved");
          sideComments.insertComment(comment);
        }
      });
    });

    // Listen to "commentDeleted" and send a request to your backend to delete the comment.
    // More about this event in the "docs" section.
    sideComments.on('commentDeleted', function (commentId) {
      $.ajax({
        url: '/delete',
        type: 'POST',
        data: commentId,
        success: function (success) {
          window.location.assign('/');
        }
      });
    });





  });
</script>